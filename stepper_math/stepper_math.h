/**
 * stepper_math.h
 *
 * Полезные математические функции для формирования траекторий
 * перемещения рабочего инструмента станка с ЧПУ на шаговых моторах
 * под управлением библиотеки stepper_h.
 *
 * LGPLv3, 2014-2017
 *
 * @author Антон Моисеев 1i7.livejournal.com
 */


#ifndef STEPPER_MATH_H
#define STEPPER_MATH_H

#include "stepper.h"

#define STEPPER_MATH_ERR_TOO_FAST 1

////
// Математика

/**
 * Подготовить линейное перемещение из текущей позиции в заданную точку
 * с заданной скоростью для одной координаты.
 * 
 * Координата точки относительна текущей позиции.
 *
 * Скорость задаём целым числом как <единица измерения координаты мотора> в секунду.
 * 
 * Допустим, шаг мотора (distance_per_step) - 7500 нанометров,
 * минимальная задержка между шагами (step_delay) - 1000микросекунд (1 миллисекунда).
 * 
 * Максимальное значение скорости получаем
 * 7500 нанометров в миллисекунду = 7500000 нанометров в секунду (параметр spd).
 * 
 * Минимальная скорость (целочисленное значение spd) - 1 нанометр в секунду -
 * это 1 миллиметр в 1000000 секунд (=277 часов ~11 дней).
 * 
 * Для микрометров получаем минимальную целочисленную скорость:
 * 1 микрометр в секунду = 1 миллиметр в 1000 секунд (~16 минут)
 * 
 * @param sm - мотор на выбранной координате
 * @param dl - сдвиг по указанной оси
 * @param spd - скорость перемещения, <единица измерения координаты мотора> в секунду
 *     0 для максимальной скорости
 * @return 0 - задание подготовлено, 
 *   > 0 - задание не подготовлено, код ошибки:
 *     STEPPER_MATH_ERR_TOO_FAST=1 - скорость превышает допустимую для выбранных моторов
 */
int prepare_line(stepper *sm, long dl, unsigned long spd=0);

/**
 * Подготовить линейное перемещение из текущей позиции в заданную точку
 * с заданной скоростью для одной координаты.
 * 
 * Координата точки абсолютна.
 *
 * @param sm - мотор на выбранной координате
 * @param cvalue - координата целевой точки
 * @param spd - скорость перемещения, мм/с (=микрометр/миллисекунда=нанометр/микросекунда);
 *     0 для максимальной скорости
 */
int prepare_line_abs(stepper *sm, long cvalue, unsigned long spd=0);

/**
 * Подготовить линейное перемещение из текущей позиции в заданную точку с заданной скоростью
 * для двух координат.
 * 
 * Координаты точки относительны текущей позиции.
 *
 * @param sm1 - мотор на координате 1
 * @param sm2 - мотор на координате 2
 * @param dl1 - сдвиг по оси 1
 * @param dl2 - сдвиг по оси 2
 * @param spd - скорость перемещения, мм/с (=микрометр/миллисекунда=нанометр/микросекунда);
 *     0 для максимальной скорости
 */
int prepare_line_2d(stepper *sm1, stepper *sm2, long dl1, long dl2, unsigned long spd=0);

/**
 * Подготовить линейное перемещение из текущей позиции в заданную точку с заданной скоростью
 * для двух координат.
 * 
 * Координаты точки абсолютны.
 *
 * @param sm1 - мотор на координате 1
 * @param sm2 - мотор на координате 2
 * @param cvalue1 - координата точки по оси 1
 * @param cvalue2 - координата точки по оси 2
 * @param spd - скорость перемещения, мм/с (=микрометр/миллисекунда=нанометр/микросекунда);
 *     0 для максимальной скорости
 */
int prepare_line_2d_abs(stepper *sm1, stepper *sm2, long cvalue1, long cvalue2, unsigned long spd=0);


#endif // STEPPER_MATH_H

